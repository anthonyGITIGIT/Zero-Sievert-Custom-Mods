# =============================================================================
# Immersive-Sounds-Containers — Rummage + Soldier/Mutant loops + Green Bag + Mutant Harvest
# Rules: base-anchored, start simple → step up, no regex, no existence checks, no fallbacks
# =============================================================================

# 0) Streams + state
gml_Object_obj_controller_Create_0:
  - type: append
    code: |-
      // Generic loops & pings
      global.ui_container_rummage             = audio_create_stream("mods/audio/interface/snd_ui_container_rummage.ogg");
      global.ui_item_reveal_sound             = audio_create_stream("mods/audio/interface/snd_ui_item_reveal.ogg");

      // Mutant skinning loop
      global.ui_container_mutant_skinning     = audio_create_stream("mods/audio/interface/snd_ui_container_mutant_skinning.ogg");

      // Human corpse looting loop
      global.ui_container_soldier_looting     = audio_create_stream("mods/audio/interface/snd_ui_container_soldier_looting.ogg");

      // Per-chest loops
      global.ui_container_rummage_toolbox     = audio_create_stream("mods/audio/interface/snd_ui_container_rummage_toolbox.ogg");
      global.ui_container_rummage_attachment  = audio_create_stream("mods/audio/interface/snd_ui_container_rummage_attachment.ogg");
      global.ui_container_rummage_electronic  = audio_create_stream("mods/audio/interface/snd_ui_container_rummage_electronic.ogg");

      // Green Bag SFX
      global.snd_green_bag_open               = audio_create_stream("mods/audio/containers/snd_container_green_bag_open.ogg");
      global.snd_green_bag_close              = audio_create_stream("mods/audio/containers/snd_container_green_bag_close.ogg");

      // Mutant harvest SFX (corrected filenames)
      global.ui_mutant_knife_stab             = audio_create_stream("mods/audio/containers/snd_container_mutant_knife_stab.ogg");
      global.ui_mutant_knife_rip              = audio_create_stream("mods/audio/containers/snd_container_mutant_knife_rip.ogg");

      // Human & Mutant container open/close SFX
      global.snd_soldier_open                 = audio_create_stream("mods/audio/interface/snd_ui_container_soldier_open.ogg");
      global.snd_soldier_close                = audio_create_stream("mods/audio/interface/snd_ui_container_soldier_close.ogg");
      global.snd_mutant_close                 = audio_create_stream("mods/audio/interface/snd_ui_container_mutant_close.ogg");
      global.snd_mutant_open                  = audio_create_stream("mods/audio/interface/snd_ui_container_mutant_open.ogg");

      // State
      global.__zs_rummage_active              = 0;
      global.__zs_last_chest_is_bag           = 0;
      global.__zs_last_chest_is_human         = 0;
      global.__zs_last_chest_is_mutant        = 0;
      global.__zs_suppress_inv_close_sfx      = 0;

      // Mutant Harvest state
      global.ms_mutant_pending                = false;
      global.ms_mutant_timer                  = 0;
      global.ms_mutant_chest                  = -4;

# 1) player_action_open_chest ops (single key)
gml_GlobalScript_player_action_open_chest:
  # (A) Prepend: suppress backpack-close during container open
  - type: prepend
    code: |-
      global.__zs_suppress_inv_close_sfx = 1;

  # (B) Replace vanilla open-SFX line:
  #     - Mutant (meat): if fully seen in DB → open immediately + mutant OPEN SFX; else STAB (pitch), schedule RIP+open.
  #     - Human (body): suppress vanilla (custom OPEN later).
  #     - Bag: suppress vanilla (custom later).
  #     - Others: vanilla.
  - type: findreplacetrim
    find: |-
      audio_play_sound(chest_get_open_sound(arg0.tipo), 10, false);
    code: |-
      {
          var __open_snd = chest_get_open_sound(arg0.tipo);

          // --- MUTANT harvest intercept (meat) ---
          if (__open_snd == snd_chest_meat_open) {
              global.__zs_last_chest_is_mutant = 1;
              global.__zs_last_chest_is_human  = 0;
              global.__zs_last_chest_is_bag    = 0;

              // Check DB: if ALL items already 'seen', skip knife and open now
              var _items = db_read_ext("all loot", "chest_" + string(arg0.id), "items", []);
              var _all_seen = (array_length(_items) > 0);
              var _i = 0;
              repeat (array_length(_items)) {
                  if (!(struct_get_from_hash(_items[_i], variable_get_hash("seen")) ?? true)) {
                      _all_seen = false;
                      break;
                  }
                  _i++;
              }

              if (_all_seen) {
                  // Open UI now — no stab/rip
                  __uiGlobal().__defaultOnion.LayerAddTop("ZS_vanilla/ui/inventory_chest.ui", "inventory layer");
                  player_set_local_state(scr_player_state_inventory);
                  ui_player_inventory_populate(true);
                  ui_chest_populate(arg0);

                  // Mutant custom OPEN (pitched)
                  var __mut_open = audio_play_sound(global.snd_mutant_open, 10, false);
                  audio_sound_pitch(__mut_open, random_range(0.90, 1.00));

                  // Mutant skinning loop — RANDOMIZED timeline + PITCH
                  var _len_sk0 = audio_sound_length(global.ui_container_mutant_skinning);
                  var _pos_sk0 = random(_len_sk0);
                  audio_sound_set_track_position(global.ui_container_mutant_skinning, _pos_sk0);
                  var __mutant_loop0 = audio_play_sound(global.ui_container_mutant_skinning, 10, true);
                  audio_sound_pitch(__mutant_loop0, random_range(0.90, 1.00));
                  global.__zs_rummage_active = 1;

                  // UI open — re-enable backpack-close for future inventory closes
                  global.__zs_suppress_inv_close_sfx = 0;
                  return;
              }

              // Not fully seen yet: play STAB (0.90–1.00) and schedule RIP+open
              var __stab_id = audio_play_sound(global.ui_mutant_knife_stab, 10, false);
              audio_sound_pitch(__stab_id, random_range(0.90, 1.00));
              global.ms_mutant_chest   = arg0;
              global.ms_mutant_timer   = round(audio_sound_length(global.ui_mutant_knife_stab) * room_speed);
              global.ms_mutant_pending = true;
              return;
          }

          // --- HUMAN corpse (body): suppress vanilla; mark flag (custom OPEN later) ---
          if (__open_snd == snd_chest_body_open) {
              global.__zs_last_chest_is_human  = 1;
              global.__zs_last_chest_is_mutant = 0;
              if (arg0.object_index != obj_chest_bag) {
                  // skip vanilla; custom OPEN will be played after populate
              }
          }
          else
          // --- GREEN BAG: suppress vanilla (custom later) ---
          if (arg0.object_index == obj_chest_bag) {
              // skip vanilla; custom OPEN will be played after populate
          }
          else {
              // Others: vanilla
              audio_play_sound(__open_snd, 10, false);
              global.__zs_last_chest_is_human  = 0;
              global.__zs_last_chest_is_mutant = 0;
          }
      }

  # (C) After UI populate: start loop (toolbox/attachment/electronic/human/generic), play custom OPENs, clear suppress flag
  - type: findreplacetrim
    find: |-
      __uiGlobal().__defaultOnion.LayerAddTop("ZS_vanilla/ui/inventory_chest.ui", "inventory layer");
      player_set_local_state(scr_player_state_inventory);
      ui_player_inventory_populate(true);
      ui_chest_populate(arg0);
      return true;
    code: |-
      __uiGlobal().__defaultOnion.LayerAddTop("ZS_vanilla/ui/inventory_chest.ui", "inventory layer");
      player_set_local_state(scr_player_state_inventory);
      ui_player_inventory_populate(true);
      ui_chest_populate(arg0);

      // Choose loop by object type first (toolbox/attachment/electronic), then by sound (human corpse), else generic rummage
      if (arg0.object_index == obj_chest_tool_box) {
          var _len_tb = audio_sound_length(global.ui_container_rummage_toolbox);
          var _pos_tb = random(_len_tb);
          audio_sound_set_track_position(global.ui_container_rummage_toolbox, _pos_tb);
          var __tb = audio_play_sound(global.ui_container_rummage_toolbox, 10, true);
          audio_sound_pitch(__tb, random_range(0.90, 1.00));
          global.__zs_rummage_active = 1;
      }
      else if (arg0.object_index == obj_chest_attachment) {
          var _len_att = audio_sound_length(global.ui_container_rummage_attachment);
          var _pos_att = random(_len_att);
          audio_sound_set_track_position(global.ui_container_rummage_attachment, _pos_att);
          var __att = audio_play_sound(global.ui_container_rummage_attachment, 10, true);
          audio_sound_pitch(__att, random_range(0.90, 1.00));
          global.__zs_rummage_active = 1;
      }
      else if (arg0.object_index == obj_chest_electronic_box) {
          var _len_el = audio_sound_length(global.ui_container_rummage_electronic);
          var _pos_el = random(_len_el);
          audio_sound_set_track_position(global.ui_container_rummage_electronic, _pos_el);
          var __el = audio_play_sound(global.ui_container_rummage_electronic, 10, true);
          audio_sound_pitch(__el, random_range(0.90, 1.00));
          global.__zs_rummage_active = 1;
      }
      else {
          var _open_snd = chest_get_open_sound(arg0.tipo);
          if (_open_snd == snd_chest_body_open) {
              // HUMAN: Soldier looting loop — RANDOMIZED timeline + PITCH
              var _len_h = audio_sound_length(global.ui_container_soldier_looting);
              var _pos_h = random(_len_h);
              audio_sound_set_track_position(global.ui_container_soldier_looting, _pos_h);
              var __soldier_loop = audio_play_sound(global.ui_container_soldier_looting, 10, true);
              audio_sound_pitch(__soldier_loop, random_range(0.90, 1.00));
              global.__zs_rummage_active = 1;

              // HUMAN custom OPEN (replaces vanilla) + PITCH
              var __soldier_open = audio_play_sound(global.snd_soldier_open, 10, false);
              audio_sound_pitch(__soldier_open, random_range(0.90, 1.00));
          } else {
              // Generic rummage loop — RANDOMIZED timeline + PITCH
              var _len = audio_sound_length(global.ui_container_rummage);
              var _pos = random(_len);
              audio_sound_set_track_position(global.ui_container_rummage, _pos);
              var __rummage_loop = audio_play_sound(global.ui_container_rummage, 10, true);
              audio_sound_pitch(__rummage_loop, random_range(0.90, 1.00));
              global.__zs_rummage_active = 1;
          }
      }

      // Green Bag custom OPEN + PITCH
      global.__zs_last_chest_is_bag = (arg0.object_index == obj_chest_bag);
      if (global.__zs_last_chest_is_bag) {
          var __bag_open = audio_play_sound(global.snd_green_bag_open, 10, false);
          audio_sound_pitch(__bag_open, random_range(0.90, 1.00));
      }

      // Container UI now open — re-enable backpack-close for future inventory closes
      global.__zs_suppress_inv_close_sfx = 0;

      return true;

# 2) Official close path: stop loops; play custom CLOSE (human/mutant/bag) with pitch; clear flags
gml_GlobalScript_ui_chest_close:
  - type: findreplacetrim
    find: |-
      function ui_chest_close()
      {
          if (!uiGetData().chest_using)
              exit;
    code: |-
      function ui_chest_close()
      {
          if (!uiGetData().chest_using)
              exit;
          // Stop any active loops
          audio_stop_sound(global.ui_container_rummage);
          audio_stop_sound(global.ui_container_mutant_skinning);
          audio_stop_sound(global.ui_container_soldier_looting);
          audio_stop_sound(global.ui_container_rummage_toolbox);
          audio_stop_sound(global.ui_container_rummage_attachment);
          audio_stop_sound(global.ui_container_rummage_electronic);
          global.__zs_rummage_active = 0;

          // HUMAN corpse custom CLOSE + PITCH
          if (global.__zs_last_chest_is_human) {
              var __soldier_close = audio_play_sound(global.snd_soldier_close, 10, false);
              audio_sound_pitch(__soldier_close, random_range(0.90, 1.00));
              global.__zs_last_chest_is_human = 0;
          }
          // MUTANT corpse custom CLOSE + PITCH
          if (global.__zs_last_chest_is_mutant) {
              var __mutant_close = audio_play_sound(global.snd_mutant_close, 10, false);
              audio_sound_pitch(__mutant_close, random_range(0.90, 1.00));
              global.__zs_last_chest_is_mutant = 0;
          }
          // GREEN BAG custom CLOSE + PITCH
          if (global.__zs_last_chest_is_bag) {
              var __bag_close = audio_play_sound(global.snd_green_bag_close, 10, false);
              audio_sound_pitch(__bag_close, random_range(0.90, 1.00));
              global.__zs_last_chest_is_bag = 0;
          }

# 3) Controller Step watcher (mutant harvest + reveal stopper + mark searched)
gml_Object_obj_controller_Step_0:
  - type: append
    code: |-
      // --- Mutant Harvest sequence ---
      if (global.ms_mutant_pending) {
          // Hard-freeze player during STAB
          var _p = instance_find(obj_player, 0);
          if (instance_exists(_p)) { with (_p) { hspeed = 0; vspeed = 0; speed = 0; x = xprevious; y = yprevious; } }

          global.ms_mutant_timer -= 1;
          if (global.ms_mutant_timer <= 0) {
              // RIP (0.90–1.00) + open UI now
              var __rip_id = audio_play_sound(global.ui_mutant_knife_rip, 10, false);
              audio_sound_pitch(__rip_id, random_range(0.90, 1.00));

              var _ch = global.ms_mutant_chest;
              if (instance_exists(_ch)) {
                  __uiGlobal().__defaultOnion.LayerAddTop("ZS_vanilla/ui/inventory_chest.ui", "inventory layer");
                  player_set_local_state(scr_player_state_inventory);
                  ui_player_inventory_populate(true);
                  ui_chest_populate(_ch);

                  // Mutant skinning loop — RANDOMIZED timeline + PITCH
                  var _len_sk = audio_sound_length(global.ui_container_mutant_skinning);
                  var _pos_sk = random(_len_sk);
                  audio_sound_set_track_position(global.ui_container_mutant_skinning, _pos_sk);
                  var __mutant_loop = audio_play_sound(global.ui_container_mutant_skinning, 10, true);
                  audio_sound_pitch(__mutant_loop, random_range(0.90, 1.00));
                  global.__zs_rummage_active = 1;

                  // UI open — re-enable backpack-close for future inventory closes
                  global.__zs_suppress_inv_close_sfx = 0;
              }

              global.ms_mutant_pending = false; // inventory now open
          }
      }

      // --- Stop loops when all items revealed or UI closes
      if (global.__zs_rummage_active > 0) {
          if (!uiGetData().chest_using) {
              // UI closed early — stop all loops
              audio_stop_sound(global.ui_container_rummage);
              audio_stop_sound(global.ui_container_mutant_skinning);
              audio_stop_sound(global.ui_container_soldier_looting);
              audio_stop_sound(global.ui_container_rummage_toolbox);
              audio_stop_sound(global.ui_container_rummage_attachment);
              audio_stop_sound(global.ui_container_rummage_electronic);
              global.__zs_rummage_active = 0;
          } else {
              var _root = uiLayerGetRoot("inventory layer");
              var _items = uiFindAllType(_root, "class_ui_item");
              var _len = array_length(_items);
              var _i = 0;
              var _any_unseen = false;

              repeat (_len) {
                  var _el = _items[_i];
                  var _loot = ui_convert_element_to_loot(_el);
                  if (!loot_get_seen(_loot)) {
                      _any_unseen = true;
                      break;
                  }
                  _i += 1;
              }

              if (!_any_unseen) {
                  // All revealed — stop loops and, if this is a mutant chest, remember it's fully searched
                  audio_stop_sound(global.ui_container_rummage);
                  audio_stop_sound(global.ui_container_mutant_skinning);
                  audio_stop_sound(global.ui_container_soldier_looting);
                  audio_stop_sound(global.ui_container_rummage_toolbox);
                  audio_stop_sound(global.ui_container_rummage_attachment);
                  audio_stop_sound(global.ui_container_rummage_electronic);
                  global.__zs_rummage_active = 0;

                  if (global.__zs_last_chest_is_mutant) {
                      var _chch = uiGetData().chest_using;
                      if (instance_exists(_chch)) _chch.__zs_mutant_fully_searched = 1;
                  }
              }
          }
      }

# 4) Per-item reveal ping with random pitch (0.90–1.00)
gml_GlobalScript_class_ui_item:
  - type: findreplacetrim
    find: |-
      if (__searchTimer >= global.svela_item_max)
          __lootStruct.seen = true;
    code: |-
      if (__searchTimer >= global.svela_item_max) {
          __lootStruct.seen = true;
          var __reveal_id = audio_play_sound(global.ui_item_reveal_sound, 10, false);
          audio_sound_pitch(__reveal_id, random_range(0.90, 1.00));
      }

# 5) Player hard-freeze during STAB
gml_Object_obj_player_Step_0:
  - type: prepend
    code: |-
      if (global.ms_mutant_pending) {
          hspeed = 0; vspeed = 0; speed = 0;
          x = xprevious; y = yprevious;
          exit;
      }

# 6) Cleanup
gml_Object_obj_controller_CleanUp_0:
  - type: append
    code: |-
      audio_stop_sound(global.ui_container_rummage);
      audio_stop_sound(global.ui_container_mutant_skinning);
      audio_stop_sound(global.ui_container_soldier_looting);
      audio_stop_sound(global.ui_container_rummage_toolbox);
      audio_stop_sound(global.ui_container_rummage_attachment);
      audio_stop_sound(global.ui_container_rummage_electronic);
      audio_stop_sound(global.ui_item_reveal_sound);
      audio_stop_sound(global.snd_green_bag_open);
      audio_stop_sound(global.snd_green_bag_close);
      audio_stop_sound(global.ui_mutant_knife_stab);
      audio_stop_sound(global.ui_mutant_knife_rip);
      audio_stop_sound(global.snd_soldier_open);
      audio_stop_sound(global.snd_soldier_close);
      audio_stop_sound(global.snd_mutant_close);
      audio_stop_sound(global.snd_mutant_open);
